// CacheTable.java
// $Id: CacheTable.java,v 1.3 1999-03-12 19:31:00 steve Exp $

/*****************************************************************************
 * The contents of this file are subject to the Ricoh Source Code Public
 * License Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://www.risource.org/RPL
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied.  See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * This code was initially developed by Ricoh Silicon Valley, Inc.  Portions
 * created by Ricoh Silicon Valley, Inc. are Copyright (C) 1995-1999.  All
 * Rights Reserved.
 *
 * Contributor(s):
 *
 ***************************************************************************** 
*/


package org.risource.util;

import java.util.Hashtable;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.FileNotFoundException;

import java.lang.String;

import java.net.URL;


/* Interface that filters a directory for files of a specific type.
 * In this case, only want files with a .hdr extension.
 */
class HeaderFilter implements FilenameFilter {
  public boolean accept(File dir, String filename) {
    if(filename.endsWith(".hdr")) {
       return true;
    }
    return false;
  }
}

/**
 * This class is a hashtable for caching pointers to URL data.
 * The key is generated by hashing on a URL object, value is the
 * path to the file containing the document data.  Filenames stored
 * in the hashtable are path plus file basename. The correct
 * extension needs to be added before searching for a .hdr or .dat file.
 */
public class CacheTable extends Hashtable {

  /************************************************************************
  ** Public interface:
  ************************************************************************/

  public Object get(int key) { 
    Integer iKey = new Integer(key);
    return super.get((Object)iKey);
  }
  
  public void put(int key, Object value) { 
    Integer iKey = new Integer(key);
    super.put(iKey, value); 
  }

  public synchronized boolean containsKey(int key) { 
    Integer iKey = new Integer(key);
    return super.containsKey(iKey); 
  }

  /************************************************************************
   **   Utility functions
  ************************************************************************/

  /** Given a complete path with file extension, returns
    * the path with the file extension removed.  May return
    * null if arguments are empty.
    */
  private String getBasename(String filepath, String ext) {

    String returnPath = null;
    if(filepath == null || ext == null)
      return returnPath;
    if(filepath.endsWith(ext)) {
      int index = filepath.indexOf(ext);
      returnPath = filepath.substring(0, index);
    }
    return returnPath;
  }

  /** Reads the file and extracts the url from the line
    * beginning "Url:".  Returns a URL object.
    */
  private URL extractURL(FileReader fr) {

    BufferedReader in = new BufferedReader(fr);
    String searchStr = "Url:";
    String line    = null;
    URL url = null;

    // Go through each line in the file
    try {
      while((line = in.readLine()) != null) {
	if(line.startsWith(searchStr)) {
	  String urlStr = line.substring(searchStr.length(), line.length());
	  urlStr = urlStr.trim();
	  url = new URL(urlStr);
	}
      }
    }
    catch(IOException e) {
      // Needs a better error here
      System.err.println(e.getMessage());
    }
    return url;
  }

  /************************************************************************
   **   Construction
  ************************************************************************/
  
  public CacheTable() {
    super();
  }

  /** Build the hashtable from today's subdirectory of
    * cached documents
    */
  public CacheTable(String directory) {
    File inputFile = new File(directory);
    FileReader fr  = null;
    String completePath    = null;
    String sep = System.getProperty("file.separator");
    URL url = null;
    
    // Fail silently.
    if (!inputFile.exists() || !inputFile.canRead()) {
      return;
    }
    if (inputFile.isDirectory() ){
      String [] files = inputFile.list(new HeaderFilter());
      for (int i=0; i < files.length; i++) {
	try {
	  completePath = directory + sep + files[i];
	  fr = new FileReader(completePath);
	}
	catch(FileNotFoundException e) {
	  System.out.println("Could not open file: " + completePath);
	  return;
	}
	url = extractURL(fr);
	if(url != null) {
	  String fileBasename = getBasename(completePath, ".hdr");
	  put(url.hashCode(), fileBasename);
	}
      }
    }
  }
}

