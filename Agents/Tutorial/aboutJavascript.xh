<!doctype html public "-//IETF//DTD HTML//EN//2.0">
<html>
<head> <title>About the Javascript-wrapper demo </title> </head>
    <make name="body">
     <let name="bgcolor"><get name="mybgcolor"/></let>
     <let name="...">
<table>
  <tr>
        <td>   <form action="tutorial.xh" name="getDemo">
            <input type="hidden" name="demoName" value="editJavascript.xh"/>
            <input  type="submit" value="Try Javascript-wrapper demo"/>
         </form> </td>

         <td><a href='home.xh' target="_top">  Demo menu</a></td>
  </tr>
</table>

    <h2> <a name="intro">The Javascript Wrapper Demo</a></h2>

  <code><pre><protect markup="yes" result="yes"><extract><from>
    <include src="javascript.xh" quoted="yes"/></from>
    <name all="yes">body</name></extract></protect></pre>
    </code>

    <p> Custom-defined tags can "wrap"
	ungainly bits of HTML or Javascript into convenient, small packages.
	The first tag above, <code>&lt;widgetJavascript/></code>, is defined
	(elsewhere, at the very bottom of our <a
	    href="Tutorial-xhtml.ts">tagset file</a> file) to expand into the
	    following Javascript code: </p>

  <code><pre><protect markup="yes" result="yes"><extract><from>
    <include src="Tutorial-xhtml.ts" quoted="yes"/></from>
    <name all="yes">SCRIPT</name></extract></protect></pre>
    </code>

    <p> The other tag above, <code>&lt;widgetForm/></code>, expands into the
	following simple HTML form (contained between the
	<code>&lt;action></code> tags): </p>

  <code><pre><protect markup="yes" result="yes"><extract><from>
    <include src="Tutorial-xhtml.ts" quoted="yes"/></from>
    <name all="yes">define</name>
    <repeat list="&list;">
       <extract>
          <from>&li;</from>
          <attr>element</attr> <eval/>
          <match>widgetForm</match>
          &li;
       </extract>
    </repeat>
    <name all="yes">action</name>      
    </extract></protect></pre>
    </code>

    <p> As you can see, a page to implement all this takes only two lines, one
	for the Javascript functions and the other for the form calling them.
	With such economy, even more complex Javascript functionality (such as
	making distinctions between browser type and version) could be
	included as reusable modules without cluttering up the page itself.</p>


     <p> <h3> Stuff to try </h3> </p>

     <p> Not much....all the Javascript is encapsulated in the
	 <code>&lt;define></code> tags (which cannot be edited, for
	 security reasons).  But you can try changing the <code>max</code> and
         <code>min</code> values, and/or making multiple copies of the form.
        </p>

     </let>
   </make>

</html>  

