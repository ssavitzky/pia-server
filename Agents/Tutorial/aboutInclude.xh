<!doctype html public "-//IETF//DTD HTML//EN//2.0">
<html>
<head> <title>About the include-extract demo </title> </head>
<body bgcolor="&mybgcolor;">
<table>
  <tr>
       <td>   <form action="tutorial.xh" name="getDemo">
            <input type="hidden" name="demoName" value="editInclude.xh"/>
            <td><input  type="submit" value="Try include-extract demo"/>
         </form></td>

         <td><a href='home.xh' target="_top">  Demo menu</a></td>
  </tr>
</table>

    <h2> <a name="intro">The Include-Extract Demo</a></h2>

    <code><pre><protect markup="yes" result="yes"><extract><from>
    <include src="include.xh" quoted="yes"/></from>
    <name all="yes">body</name></extract></protect></pre>
    </code>

    <p> The <code>&lt;include></code> tag will locate, process, and then
	substitute for itself the contents of whatever resource it receives as
	its "src" attribute... a URL or a filename, for example.  So the
	<code>&lt;include></code> tag here in effect becomes the entire Yahoo
	home page, images and all.

    <p> That whole page lies inside--and hence is processed by--the enclosing
	<code>&lt;from></code> sub-tag, which designates the page as the
	"input" to the outermost <code>&lt;extract></code> tag.

     <p> The <code>&lt;extract></code> tag takes a document (in this case the
	 Yahoo page enclosed in its <code>&lt;from></code> sub-tag) and keeps
	 only specific pieces: in this case, the tags with the name "img." In
	 other words, the only things which will get through this extraction
	 will be of the form

     <p><div align="center"> <code>&lt;img> stuff, more stuff
         &lt;/img></code>. </div>


     <p> Did you see a red "Errors:" message below the images?  Those result
	 from our <a href="aboutErrorTest.xh"> show-errors
	 tag </a> detecting missing end-tags in Yahoo's home page (which
	 occurs because their HTML is not as strict about using end-tags as
	 XML is).  So don't worry....</p>

     <p> <h3> Stuff to try </h3>

     <p>If the string "img" were changed to the string "a" in the extraction,
     then this demo would instead extract all the anchor-tags, like
     <code>&lt;a href="http://www.yahoo.com">Click here!&lt;/a></code>, or
     some such things.  If the string "html" were used, then almost the entire
     page would pass through, because the whole page lies inside a
     <code>&lt;html></code> tag.

     <p>  The <code>&lt;extract></code> tag can be fiendishly powerful (and
	  complicated), with far more possibilities (case sensitivity, node
	  replacement, recursive descent, etc.) that we can possibly explain
	  or demo here.  The  <code>&lt;include></code> tag, on the other
	  hand, is fairly simple.

     <p> If you just want to see how <code>&lt;include></code> works by
     itself, get rid of everything around it and click "process."  You can
     then try including something else, like the file "repeat.xh" (which is
     the core of the "Hello WWW" demo) in place of "http://www.yahoo.com/".
     With that file, you can turn off processing (i.e. the repeating stuff) by
     using <code> &lt;include src="repeat.xh" quoted="yes"/></code>, in which
     assigning a non-empty value (e.g. "yes") to the attribute named
     <code>quoted</code> tells it just to quote, but not to process, whatever
     it gets.

     <p> In fact, the code snippet at the top of this page was generated by
     including the file <code>include.xh</code> and then extracting the single
     <code>&lt;body></code> tag, to get rid of the distracting headers, html
     tags, DOCTYPES, and such.  Or if you want to get really warped, you can
     include <i>this</i> page ("aboutInclude.xh"), which itself includes the
     code snippet above.  This is how active-XML documents can contain one
     another recursively, in principle to any depth you want.



</body>
</html>  

