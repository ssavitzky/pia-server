XCOMM Imake template file for PIA
XCOMM pia.tmpl,v 1.7 1997/08/22 20:43:56 steve Exp

/**********************************************************************
*
* This template/rules file is meant to be used with imake.  It may
* prove useful for an X application that is designed to be used with
* the PIA.
*
* Usage:
*	#include "Config/makefiles/pia.tmpl"
*
***********************************************************************/

/**********************************************************************
*
* What to build
*
*	=== this probably can be scrapped ===
*
***********************************************************************/

#define NormalLibBase YES

/**********************************************************************
*
* Make macros
*
***********************************************************************/

PIATOPDIR	= TOPDIR
PIASRCDIR	= TOPDIR/src
PIALIBS	        = TOPDIR/src/lib
PIAAPPS	        = TOPDIR/src/apps
PIAINCSRC	= TOPDIR/src/lib
PIATOOLDIR	= TOPDIR/src/tools

/* System libraries for C++ only; don't need SYSTEM_LIBRARIES for non-X11 */
/* -Lusr/local/lib required after installing a new gcc in /usr/local */
SYS_LIBRARIES   = -lg++ -lstdc++ -lm

CXXDEBUGFLAGS	= -g

CXX = gcc -x c++
CXXLINK = gcc
CXXOPTIONS = -Wall -Wswitch -felide-constructors -falt-external-templates -Wno-unused -Woverloaded-virtual

/* The following is required after installing a new gcc in /usr/local */
/* DEPEND_DEFINES = -I/usr/local/lib/g++-include */

TOP_INCLUDES   = -I$(PIAINCSRC) -I..
IMAKE_DEFINES  = -I$(PIATOPDIR) -I$(PIASRCDIR) -I$(PIAINCSRC)


/**********************************************************************
*
* Overrides of standard Imake rules
*
*	Intended to be more robust with missing subdirectories, or
*	subdirectories with missing Makefile or Imakefile.  The old
*	version ended up making an infinite recursion.
*
***********************************************************************/

/*
 * NamedTargetSubdirs - recursively make a series of steps
 */
#ifdef NamedTargetSubdirs
#undef NamedTargetSubdirs
#endif
#ifndef NamedTargetSubdirs
#define NamedTargetSubdirs(name,dirs,verb,flags,subname)		@@\
name::									@@\
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@\
	for i in dirs ;\						@@\
	do test ! -d $$i || test ! -f $$i/Makefile || \			@@\
		(cd $$i ; echo verb "in $(CURRENT_DIR)/$$i..."; \	@@\
			$(MAKE) $(MFLAGS) flags subname); \		@@\
	done
#endif

/*
 * MakeMakeSubdirs - generate rules to recursively recreate Makefiles as part
 * of the specified step in the build.  If $(TOP) is set to an absolute path, 
 * do not prepend the ../ prefix.  This makes running things outside of the 
 * source tree to be much easier.
 **GJW-8/96 changed RemoveFile(Makefile.bak) to $(RM) Makefile.bak
 */
#ifdef MakeMakeSubdirs
#undef MakeMakeSubdirs
#endif
#ifndef MakeMakeSubdirs
#define MakeMakeSubdirs(dirs,target)					@@\
target::								@@\
	-@case '${MFLAGS}' in *[ik]*) set +e;; esac; \			@@\
	case '${MFLAGS}' in *n*) executeit="no";; esac; \		@@\
	for i in dirs ;\						@@\
	do \								@@\
		( test -d $$i && test -f $$i/Imakefile ) || continue;\	@@\
		case "$(CURRENT_DIR)" in \				@@\
		.) curdir= ;; \						@@\
		*) curdir=$(CURRENT_DIR)/ ;; \				@@\
		esac; \							@@\
		echo "making Makefiles in $$curdir$$i..."; \		@@\
		itmp="$$i" \						@@\
		curtmp="$(CURRENT_DIR)" \				@@\
		toptmp=""; \						@@\
		case "$$itmp" in \					@@\
		    ../?*) \ 						@@\
			while echo "$$itmp" | grep '^../' > /dev/null;\	@@\
			  do \						@@\
			     toptmp="/`basename $$curtmp`$$toptmp"; \	@@\
			     curtmp="`dirname $$curtmp`"; \		@@\
			     itmp="`echo $$itmp | sed 's;../;;'`"; \	@@\
			  done \					@@\
		    ;; \						@@\
		    ./?*) \						@@\
			while echo "$$itmp" | grep '^./' > /dev/null;\	@@\
			  do \						@@\
			    itmp="`echo $$itmp | sed 's;./;;'`"; \	@@\
			  done \					@@\
		    ;; \						@@\
		esac; \							@@\
		case "$$itmp" in \					@@\
		*/?*/?*/?*/?*)	newtop=../../../../..;; \		@@\
		*/?*/?*/?*)	newtop=../../../..;; \			@@\
		*/?*/?*)	newtop=../../..;; \			@@\
		*/?*)		newtop=../..;; \			@@\
		*)		newtop=..;; \				@@\
		esac; \							@@\
		newtop="$$newtop$$toptmp"; \				@@\
		case "$(TOP)" in \					@@\
		/?*) imaketop=$(TOP) \					@@\
		     imakeprefix= ;; \					@@\
		.) imaketop=$$newtop \					@@\
		   imakeprefix=$$newtop/ ;; \				@@\
		*) imaketop=$$newtop/$(TOP) \				@@\
		   imakeprefix=$$newtop/ ;; \				@@\
		esac; \							@@\
		cd $$i; \						@@\
		$(RM) Makefile.bak; \					@@\
		if [ -f Makefile ]; then \				@@\
			echo "	$(MV) Makefile Makefile.bak"; \		@@\
			if [ "$$executeit" != "no" ]; then \		@@\
				$(MV) Makefile Makefile.bak; \		@@\
			fi; \						@@\
		fi; \							@@\
		if [ "$$executeit" != "no" ]; then \			@@\
			ImakeSubCmdHelper -DTOPDIR=$$imaketop -DCURDIR=$$curdir$$i; \ @@\
		fi; \							@@\
		$(MAKE) $(MFLAGS) Makefiles; \				@@\
		cd $$newtop; \						@@\
	done

#ifdef ImakeSubCmdHelper
#undef ImakeSubCmdHelper
#endif
#ifdef UseInstalled
/* 
 * This is something of a crock.  
 * The -I$$imaketop lets you put pia.tmpl at the top level
 */
#define ImakeSubCmdHelper $(IMAKE_CMD) \
    -I$$imaketop 
#else
#define ImakeSubCmdHelper $$imakeprefix$(IMAKE) -I$$imakeprefix$(IRULESRC) $(IMAKE_DEFINES)
#endif

#endif /* MakeMakeSubdirs */


/**********************************************************************
*
* Imake rules for PIA
*
*	=== probably belong in pia.rules ===
*	=== left over from REST and can probably be eliminated ===
*
***********************************************************************/

/* Documenting */

#define PiaDocTarget()\
docs:: summary.idx $(DOCS)

#define PiaDocSubdirs(dirs)\
NamedTargetSubdirs(docs,dirs,"documenting",NullParameter,docs)


/**********************************************************************
*
* Make Rules for PIA
*
***********************************************************************/

.SUFFIXES: .tex .dvi .html .idx .ps .xbm .fig .eps .gif .mif .fm .ppm

/* .fm (frame5) to mif    put cmds in file then do fmbatch
 */
.fm.mif:
	echo "Open $<" >> .tmp ;echo "SaveAs m $< $*.mif" >> .tmp; \
 echo "Quit " >> .tmp ; fmbatch .tmp ; rm .tmp

/* .fm (frame5) to ps    ../pia_temp.fm holds printer settings
 * can go to file or printer...
 */
.fm.ps:
	echo "Open $<" >> .tmp ;echo "Open ../pia_temp.fm" >> .tmp; \
 echo "Print $< ../pia_temp.fm" >> .tmp ; fmbatch .tmp ; rm .tmp

/* .mif (framemaker) to html
 */
.mif.html:
	webmaker -c ../pia.wml -w ./ -t "$*" -n "page" -f BOTTOM -e \
 CONVERT-TO-IMAGES  $< ; ln page-1.html $*.html

/* .fig (xfig) to various output formats.
 * 	Works even with GNU ghostscript, which doesn't have GIF drivers.
 */
.fig.gif:	 
	fig2dev -Lps -P $< \
	| gs -q -dNOPAUSE -sDEVICE=ppmraw -sOutputFile=- - \
	| pnmcrop | ppmtogif -transparent white > $@

.fig.ps:	 
	fig2dev -Lps -P $< > $@

.fig.eps:	 
	fig2dev -Lps $<  > $@

/* Other image format conversions */
.ps.gif:	 
	gs -q -dNOPAUSE -sDEVICE=ppmraw -sOutputFile=- $< </dev/null\
	| pnmcrop | ppmtogif -transparent white > $@

.ppm.gif:	 
	ppmtogif -transparent white $< > $@

.gif.eps:
	giftopnm $< | pnmtops -noturn -rle -nocenter > $@

/* LaTeX to dvi and dvi to postscript */
.tex.dvi:
	echo q | latex $*
	if [ -f $*.toc ]; then echo q | latex $*; else true; fi

.dvi.ps:
	dvips -r0 -o $*.ps $*




